#ifndef GL_WINDOW_H__
#define GL_WINDOW_H__

#include "drawPlant.h"
#include "LSystem.h"
#include "Weather.h"
#include "Particle.h"

#include <iostream>
#include <fstream>
#include <QEvent>
#include <QResizeEvent>
#include <QGLWidget>
#include <QTime>
#include <ngl/Text.h>
#include <ngl/Obj.h>
#include <ngl/Light.h>
#include <ngl/Camera.h>
#include <ngl/Transformation.h>
#include <ngl/Vec3.h>
//----------------------------------------------------------------------------------------------------------------------
/// @file GLWindow.h
/// @author Ellie Ansell
/// @version 3.0
/// @date 09/05/15
/// @class GLWindow.cpp
/// @brief the main glwindow widget for NGL applications.
//----------------------------------------------------------------------------------------------------------------------
class GLWindow : public QGLWidget
{
//----------------------------------------------------------------------------------------------------------------------
/// @brief  included in order to use Qt signals/slots
//----------------------------------------------------------------------------------------------------------------------
Q_OBJECT
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for GLWindow
  /// @param[in] *_parent the parent window to create the GL context in
  /// @param[in] _format takes the QGL format
  //----------------------------------------------------------------------------------------------------------------------
  GLWindow(const QGLFormat _format,QWidget *_parent );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Destructor for GLWindow
  //----------------------------------------------------------------------------------------------------------------------
	~GLWindow();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  stores sun position
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_sunPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  stores rain position
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_rainPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  direction of wind
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_windVec;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  camera slide value
  //----------------------------------------------------------------------------------------------------------------------
  float m_camSlideY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag to toggle wind mode
  //----------------------------------------------------------------------------------------------------------------------
  bool m_windOnOff;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  Outputs the set parameters to the config file
  //----------------------------------------------------------------------------------------------------------------------
  void fileOut();

 public slots :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  set the X scale value
    /// @param[in] _x the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void setDepth(int _i);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  set the smoothlevel
    /// @param[in] _x the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void smoothLevel(int _i);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the sun X position
    /// @param[in] _x the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void sunPosX(double _x);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the sun Y position
    /// @param[in] _y the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void sunPosY(double _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the sun Z position
    /// @param[in] _z the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void sunPosZ(double _z);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the rain X position
    /// @param[in] _x the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void rainPosX(double _x);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the rain y position
    /// @param[in] _y the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void rainPosY(double _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the rain z position
    /// @param[in] _z the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void rainPosZ(double _z);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the sunIntensity
    /// @param[in] _i the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void sunIntensity(double _i);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the windIntensity
    /// @param[in] _i the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void windIntensity(double _i);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the x wind direction
    /// @param[in] _x the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void windDirX(double _x);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the y wind direction
    /// @param[in] _y the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void windDirY(double _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the z wind direction
    /// @param[in] _z the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void windDirZ(double _z);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  toggle for the sun
    /// @param[in] _mode the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void toggleSun(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the toggle for the rain
    /// @param[in] _mode the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void toggleRain(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the toggle for the wind
    /// @param[in] _mode the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void toggleWind(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the toggle for the leaf
    /// @param[in] _mode the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void toggleLeaf(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the toggle for confetti
    /// @param[in] _mode the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void toggleConfetti(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the X angle increment
    /// @param[in] _x the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void angleIncrementX(double _x);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the y angle increment
    /// @param[in] _y the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void angleIncrementY(double _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the z angle increment
    /// @param[in] _z the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void angleIncrementZ(double _z);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the plants height
    /// @param[in] _i the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void plantHeight(double _i);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  the camera slide position in Y
    /// @param[in] _y the value to set
    //----------------------------------------------------------------------------------------------------------------------
    void camSlideY(int _y);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  to get the axiom from the gui line edit box
    /// @param[in] _axiomStr the initial axiom string
    //----------------------------------------------------------------------------------------------------------------------
    inline void getAxiomString(char _axiomStr){m_axiom = _axiomStr;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  to get the axiom from the gui line edit box
    /// @param[in] _axiomStr2 the second axiom character
    //----------------------------------------------------------------------------------------------------------------------
    inline void getAxiom2String(char _axiom2Str){m_axiom1 = _axiom2Str;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  to get the rule from the gui line edit box
    /// @param[in] _ruleStr the initial axiom character
    //----------------------------------------------------------------------------------------------------------------------
    inline void getRuleString(std::string _ruleStr){m_rule = _ruleStr;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  to get the second rule from the gui line edit box
    /// @param[in] _ruleStr the second rule string
    //----------------------------------------------------------------------------------------------------------------------
    inline void getRule2String(std::string _rule2Str){m_rule1 = _rule2Str;}

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  vector storing the values which the branches rotate
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_angleIncrement;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the amount the plant is scaled by
  //----------------------------------------------------------------------------------------------------------------------
  float m_scalePlant;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  queries for folliage on the plant
  //----------------------------------------------------------------------------------------------------------------------
  float m_folliage;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  queries for wind on the plant
  //----------------------------------------------------------------------------------------------------------------------
  float m_wind;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  radius of the plant created
  //----------------------------------------------------------------------------------------------------------------------
  float m_radius;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  height of the plant
  //----------------------------------------------------------------------------------------------------------------------
  float m_height;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  recursive depth of the string created
  //----------------------------------------------------------------------------------------------------------------------
  int m_depth;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  hitcount for the number of rain hits
  //----------------------------------------------------------------------------------------------------------------------
  int m_hitCount;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag to toggle wireframe mode
  //----------------------------------------------------------------------------------------------------------------------
	bool m_wireframe;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag to toggle sun mode
  //----------------------------------------------------------------------------------------------------------------------
  bool m_sunOnOff;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag to toggle rain mode
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rainOnOff;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag to toggle wind confetti
  //----------------------------------------------------------------------------------------------------------------------
  bool m_confetti;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  axiom input to build string
  //----------------------------------------------------------------------------------------------------------------------
  char m_axiom;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  axiom input to build string
  //----------------------------------------------------------------------------------------------------------------------
  char m_axiom1;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  smoothness of the plant
  //----------------------------------------------------------------------------------------------------------------------
  int m_smoothLevel;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  rule input to build string
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_rule;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  second rule input to build string
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_rule1;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  vector of scale data
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_scale;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  Position vector
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_position;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the intensity of the sun
  //----------------------------------------------------------------------------------------------------------------------
  float m_intensitySun;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  points to ngl text class
  //----------------------------------------------------------------------------------------------------------------------
	ngl::Text *m_text;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  pointers to pot, soil and leaf objects
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Obj *m_pot, *m_soil;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  lists of vectors to store date of leaf positions and vectors
  //----------------------------------------------------------------------------------------------------------------------
  std::deque <ngl::Vec3> m_vectorList, m_leafList;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  vector storing where the branches end
  //----------------------------------------------------------------------------------------------------------------------
  std::deque <int> m_branchEnd;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  list of angles to be inputted to drawPlant to rotate circle ends of branches
  //----------------------------------------------------------------------------------------------------------------------
  std::deque <ngl::Vec3> m_angleList;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  start position vector of the plant
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_startVector;


protected:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  transform for objects
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Transformation m_transform;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  light for the scene
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Light *m_light;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  used to store the x rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinXFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  used to store the y rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinYFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the previous x mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the previous y mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the previous x mouse value for position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origXPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the previous x mouse value for position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origYPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag to indicate if the right mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_translate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag to indicate if the mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  the model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_modelPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  used to store the global mouse transforms
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  The following methods must be implimented in the sub class
  /// this is called when the window is created
  //----------------------------------------------------------------------------------------------------------------------
  void initializeGL();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is called whenever the window is re-sized
  /// @param[in] _w the width of the resized window
  /// @param[in] _h the height of the resized window
  //----------------------------------------------------------------------------------------------------------------------
  void resizeGL(const int _w, const int _h );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is the main gl drawing routine which is called whenever the window needs to be redrawn
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL();

private :

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  flag for the fps timer
  //----------------------------------------------------------------------------------------------------------------------
  int m_fpsTimer;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  draws with frames per second
  //----------------------------------------------------------------------------------------------------------------------
  int m_fps;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  number of frames
  //----------------------------------------------------------------------------------------------------------------------
  int m_frames;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  number of frames for the wind algorithm
  //----------------------------------------------------------------------------------------------------------------------
  int m_frameTotal;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  QTimer used to time duration of the program
  //----------------------------------------------------------------------------------------------------------------------
  QTime m_timer;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  pointer to Emitter class in weather.h which updates rain particle positions
  //----------------------------------------------------------------------------------------------------------------------
  Weather *m_weather;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  pointer to Draw class in plant.h to draw the plant
  //----------------------------------------------------------------------------------------------------------------------
  drawPlant *m_draw;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  pointer to LSystem class in lsystem.h to convert string from stringmanipulator to vector points
  //----------------------------------------------------------------------------------------------------------------------
  LSystem *m_lsystem;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  pointer to particle class to grab and print data
  //----------------------------------------------------------------------------------------------------------------------
  Particle *m_particle;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param[in] _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent (QMouseEvent * _event );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param[in] _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent ( QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param[in] _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent ( QMouseEvent *_event );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called to update the timer and redraw the scene
  /// inherited from QObject and overridden here.
  /// @param[in] _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(QTimerEvent *);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method loads model, view and projection matrices
  /// inherited from QObject and overridden here.
  /// @param[in] _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShader( );
};
#endif
