#ifndef WEATHER_H
#define WEATHER_H

#include "Particle.h"

#include <iostream>
#include <vector>
#include <ngl/Vec3.h>
#include <cstdlib>
#include <deque>
#include <ngl/Camera.h>
#include <ngl/Transformation.h>

#include <ngl/Random.h>
#include <ngl/ShaderLib.h>
#include <ngl/VAOPrimitives.h>
#include <ngl/Transformation.h>
//----------------------------------------------------------------------------------------------------------------------
/// @file Weather.h
/// @author Ellie Ansell
/// @version 3.0
/// @date 09/05/15
/// @class  Weather.cpp
/// @brief  this class builds builds and updates the particles' positions
//----------------------------------------------------------------------------------------------------------------------
class Weather
{
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief constructor
  /// @param[in] _pos the position of the emitter
  /// @param[in] _numParticles the number of particles to create
  //----------------------------------------------------------------------------------------------------------------------
  Weather(ngl::Vec3 _pos, int _numParticles);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief
  /// @param[in] query to toggle whether rain is on or off
  /// @param[in] query to toggle whether the confetti is on or off
  //----------------------------------------------------------------------------------------------------------------------
  int update(bool _rainOnOff, bool _confetti);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a method to draw all the particles contained in the system
  /// @param[in] query to toggle if rain is on or off
  /// @param[in] query to toggle if confetti is on or off
  //----------------------------------------------------------------------------------------------------------------------
  void draw(bool _rainOnOff, bool _confetti);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the camera from GLWindow
  /// @param[in] _cam the ngl camera
  //----------------------------------------------------------------------------------------------------------------------
  inline void setCam(ngl::Camera *_cam){m_cam=_cam;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief imports the camera for GLWindow
  //----------------------------------------------------------------------------------------------------------------------
  inline ngl::Camera * getCam()const {return m_cam;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the shader from GLWindow
  /// @param[in] _n assigns name of shader to shadername
  //----------------------------------------------------------------------------------------------------------------------
  inline void setShaderName(const std::string &_n){m_shaderName=_n;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief gets the shader name from GLWindow
  //----------------------------------------------------------------------------------------------------------------------
  inline const std::string getShaderName()const {return m_shaderName;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief gets the transform matrices from GLWindow
  /// @param[in] _transform sets the transform to this
  //----------------------------------------------------------------------------------------------------------------------
  inline void setTransform(ngl::Transformation _transform){m_transform = _transform;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief sets the mouse transform matrix from GLWindow
  /// @param[in] _mouseGlobalTX the mouse global matrices
  //----------------------------------------------------------------------------------------------------------------------
  inline void setMouseTransform(ngl::Mat4 _mouseGlobalTX){m_mouseGlobalTX = _mouseGlobalTX;}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief transform matrix
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Transformation m_transform;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the mouse transformation matrices
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  ///@brief the number of times rain hits the plant pot
  //----------------------------------------------------------------------------------------------------------------------
  int m_hitCount;

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the position of the emitter
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_pos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the number of particles
  //----------------------------------------------------------------------------------------------------------------------
  int m_numParticles;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the container for the particles
  //----------------------------------------------------------------------------------------------------------------------
  std::vector <Particle> m_particles;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the name of the shader to use
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_shaderName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to the camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_cam;
};
#endif // WEATHER_H
